// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Role {
  USER
  ADMIN
  RECRUITER
}

model User {
  id                        String  @id @default(uuid())
  role                      Role    @default(USER)
  name                      String?
  email                     String  @unique
  phone                     String? @unique
  password                  String
  verified                  Boolean @default(false)
  phoneVerified             Boolean @default(false)
  balance                   Float   @default(0)
  level                     String?
  referralCode              String? @unique
  avatarId                  Int?
  telegramUserId            Int?
  googleUserWithoutPassword Boolean @default(false)

  jobs         Job[]       @relation("UserJobs")
  bookmarks    Bookmark[]
  applications Applicant[] // ✅ Added relation to Applicant

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Job {
  id           String      @id @default(uuid())
  title        String
  description  String
  company      String
  location     String
  salary       Float?
  type         String
  postedBy     User        @relation("UserJobs", fields: [postedById], references: [id])
  postedById   String
  applicants   Applicant[]
  bookmarkedBy Bookmark[] // ✅ Added relation to Bookmark

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Applicant {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  job    Job    @relation(fields: [jobId], references: [id])
  jobId  String
  resume String
  status String @default("pending") // applied, shortlisted, rejected, hired

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bookmark {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  job    Job    @relation(fields: [jobId], references: [id])
  jobId  String

  createdAt DateTime @default(now())
}
